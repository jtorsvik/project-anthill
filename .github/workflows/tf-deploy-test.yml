name: Promote Terraform changes to testing environment

on:
    workflow_dispatch:
        inputs:
            cloud_provider:
                description: 'Cloud provider for the environment'
                required: true
                type: choice
                options:
                    - aws
                    - azure
                    - gcp
            workspace:
                description: 'Terraform workspace to use'
                required: true
                type: choice
                options:
                    - platform_development
                    - innovation_development

permissions:
    contents: write
    pull-requests: write
            
jobs:
    terraform-plan-dev:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Set up Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                terraform_version: 1.7.0
            
            - name: Configure AWS CLI
              if: ${{ github.event.inputs.cloud_provider == 'aws' }}
              run: |
                  aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                  aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                  aws configure set default.region $AWS_DEFAULT_REGION
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

            - name: Initialize Terraform
              run: terraform -chdir=terraform/${{github.event.inputs.workspace}}/environment/${{ github.event.inputs.cloud_provider }}/dev/ init

            - name: Validate Terraform configuration
              run: terraform -chdir=terraform/${{github.event.inputs.workspace}}/environment/${{ github.event.inputs.cloud_provider }}/dev/ validate
            
            - name: Plan Terraform changes
              run: terraform -chdir=terraform/${{github.event.inputs.workspace}}/environment/${{ github.event.inputs.cloud_provider }}/dev/ plan

            - name: Output environment
              run: echo "Successfull terraform plan in dev environment"
    deploy-to-test:
        runs-on: ubuntu-latest
        needs: terraform-plan-dev
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Set up Git user
              run: |
                git config --global user.name ${{ github.actor }}
                git config --global user.email ${{ github.actor }}@users.noreply.github.com
            
            - name: Create deployment branch
              run: |
                git switch -c ${{ github.event.inputs.workspace }}-test-deployment
                echo "Created branch for deployment to test environment"

            - name: Copy dev to test
              run: |


                  find terraform/${{ github.event.inputs.workspace }}/environment/${{ github.event.inputs.cloud_provider }}/dev \
                    -maxdepth 1 \
                    -type f \
                    -name "*.tf" \
                    ! -name "environments.tf" \
                    ! -name "backends.tf" \
                    -exec cp -v {} terraform/${{github.event.inputs.workspace}}/environment/${{ github.event.inputs.cloud_provider }}/test/ \;
                  echo "Copied dev to test environment"
            
            - name: Set up Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                terraform_version: 1.7.0
            
            - name: Configure AWS CLI
              if: ${{ github.event.inputs.cloud_provider == 'aws' }}
              run: |
                  aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                  aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                  aws configure set default.region $AWS_DEFAULT_REGION
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            
            - name: Initialize Terraform
              run: terraform -chdir=terraform/${{github.event.inputs.workspace}}/environment/${{ github.event.inputs.cloud_provider }}/test/ init

            - name: Validate Terraform configuration
              run: terraform -chdir=terraform/${{github.event.inputs.workspace}}/environment/${{ github.event.inputs.cloud_provider }}/test/ validate

            - name: Plan Terraform changes
              run: terraform -chdir=terraform/${{github.event.inputs.workspace}}/environment/${{ github.event.inputs.cloud_provider}}/test/ plan -out=tfplan

            - name: Commit & create pull request for Terraform changes to test environment
              uses: peter-evans/create-pull-request@v6
              with:
                  commit-message: "Deploy Terraform changes to test environment"
                  branch: ${{ github.event.inputs.workspace }}-test-deployment
                  base: main
                  title: "Deploy Terraform changes to test environment"
                  body: |
                    """
                    This pull request deploys the Terraform changes from the development environment 
                    to the test environment for the `${{ github.event.inputs.workspace }}` workspace 
                    on `${{ github.event.inputs.cloud_provider }}`.

                    Please review the changes before merging.
                    - Workspace: `${{ github.event.inputs.workspace }}`
                    - Cloud Provider: `${{ github.event.inputs.cloud_provider }}`
                    - Environment: Test
                    - Branch: `${{ github.event.inputs.workspace }}-test-deployment`
                    - Plan file: `tfplan`
                    - Changes: 
                      - Copied Terraform files from development to test environment
                      - Planned changes for the test environment
                    - Note: This PR does not apply the changes automatically.
                    """

                  

            ### Uncomment the following lines to apply the Terraform changes automatically
            # - name: Apply Terraform changes
            #   run: terraform -chdir=terraform/${{github.event.inputs.workspace}}/environment/${{ github.event.inputs.cloud_provider}}/test/ apply -auto-approve